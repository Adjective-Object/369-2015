Maxwell Huang-Hobbs
c3huangk
CSC369, Assignment 2


== Task 1
The script for task 1 is `analyze.py`

 ----------------------------------------------------------------------- 
| Tracefile      | Markerfile        | I   | S/L/R | Inside   | Outside |
|-----------------------------------------------------------------------|
| simpleloop     | simpleloop.marker | 64  | 2574  | 70803    | 52075   |
| matmul-100     | matmul.marker     | 74  | 1018  | 23654302 | 52486   |
| blocked-100-25 | blocked.marker    | 77  | 1019  | 23956102 | 52618   |
| make-sim       | <null>            | 128 | 150   | 0        | 1149032 |
| grep-freedom   | <null>            | 133 | 136   | 0        | 404846  |
 ----------------------------------------------------------------------- 

Note: for programs we do not modify the source of, `Outside` is the number
of instructions over the entire run of the process.

simpleloop uses a small number of instructions pages and a large number of
data pages. Moreover, it uses  a comparativley small number of memory
operations when compared to matmul and blocked. This makes sense, all of 
simpleloop's instructions are heap memory allocations in sequence.

In contrast, matmul uses a small number of instructions, a moderate number 
of data pages, and executes a  large number of memory accesses.
matmul only performs arithmetic operations on a few matricies, changing
their values in place over the course of many multiplications. The
relatively low ratio of  data pages used / memory accesses performed is to
be expected of a process that mainly changes values 'in place'.

blocked has near-identical access stats to matmul. Both programs are
implementations of different matrix multiplication algorithms, so it
would not be unreasonable to think they are operating on what is effectively
the same data. The only significant difference/ in the number of data pages 
used would come from temporary variables on the stack, as neither
implementation of matrix multiplication seems to make use of large temporary
variables.

Interestingly, make uses  a small number of data and instruction pages, but 
goes through large number of memory accesses. This is in line with expected
behavior, as make itself only performs some small text operations before
forking and calling exec. The behavior of gcc is outside of the scope of
this course, but it is not unreasonable to assume given the size of the input
and output files that gcc would have similar access patterns.


The interesting program (tracefile grep-freedom) chosen for Task 1 was
grep, and the tracefile was generated by grepping for the word `libre` over
the text of the book `Free as in Freedom: Richard Stallman's Crusade for 
Free Software.

Like make, grep uses a small number of pages and executes a large number
of instructions over the course of it's run. Given grep's function (to
scan bodies of text), we can infer from this that it likely loads only a
small subsection of the text into memory at a time, before scanning,
printing results, and then pulling a new block of text in.

== Task 2


 ----------------------------------------------------------------------------- 
| alg   | m  | trace      | Hits     | Misses  | Total    | HitRate | MissRte |
|-----------------------------------------------------------------------------|
| fifo  | 50 | simpleloop | 380013   | 2977    | 382990   | 99.2227 | 0.7773  |
| fifo  | 50 | matmul     | 62055545 | 1129703 | 63185248 | 98.2121 | 1.7879  |
| fifo  | 50 | blocked    | 67869846 | 6458    | 67876304 | 99.9905 | 0.0095  |
|-----------------------------------------------------------------------------|
| lru   | 50 | simpleloop | 380213   | 2777    | 382990   | 99.2749 | 0.7251  |
| lru   | 50 | matmul     | 62144028 | 1041220 | 63185248 | 98.3521 | 1.6479  |
| lru   | 50 | blocked    | 67871123 | 5181    | 67876304 | 99.9924 | 0.0076  |
|-----------------------------------------------------------------------------|
| clock | 50 | simpleloop | 380104   | 2886    | 382990   | 99.2465 | 0.7535  |
| clock | 50 | matmul     | 61350880 | 1834368 | 63185248 | 97.0968 | 2.9032  |
| clock | 50 | blocked    | 66585045 | 1291259 | 67876304 | 98.0976 | 1.9024  |
|-----------------------------------------------------------------------------|
| opt   | 50 | simpleloop | 380323   | 2667    | 382990   | 99.3036 | 0.6964  |
| opt   | 50 | matmul     | 62597794 | 587454  | 63185248 | 99.0703 | 0.9297  |
| opt   | 50 | blocked    | 67872582 | 3722    | 67876304 | 99.9945 | 0.0055  |
 ----------------------------------------------------------------------------- 

